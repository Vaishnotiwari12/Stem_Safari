"use client"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { ScrollArea } from "@/components/ui/scroll-area"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Mic, MicOff, VolumeX, Bot, Send } from "lucide-react"

declare global {
  interface Window {
    SpeechRecognition: any
    webkitSpeechRecognition: any
  }
}

interface Message {
  id: string
  type: "user" | "ai"
  content: string
  language: string
  timestamp: Date
  audioUrl?: string
}

interface AITutorProps {
  currentQuest?: {
    id: string
    title: string
    subject: string
    difficulty: string
  }
}

export function AITutor({ currentQuest }: AITutorProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [isListening, setIsListening] = useState(false)
  const [isSpeaking, setIsSpeaking] = useState(false)
  const [selectedLanguage, setSelectedLanguage] = useState("en")
  const [messages, setMessages] = useState<Message[]>([])
  const [inputText, setInputText] = useState("")
  const [isProcessing, setIsProcessing] = useState(false)

  const recognitionRef = useRef<any>(null)
  const synthesisRef = useRef<SpeechSynthesis | null>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const languages = [
    { code: "en", name: "English", voice: "en-US", flag: "üá∫üá∏" },
    { code: "hi", name: "‡§π‡§ø‡§Ç‡§¶‡•Ä", voice: "hi-IN", flag: "üáÆüá≥" },
    { code: "bn", name: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", voice: "bn-IN", flag: "üáßüá©" },
    { code: "te", name: "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å", voice: "te-IN", flag: "üáÆüá≥" },
    { code: "ta", name: "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç", voice: "ta-IN", flag: "üáÆüá≥" },
  ]

  const currentLanguage = languages.find((lang) => lang.code === selectedLanguage) || languages[0]

  // Initialize speech recognition and synthesis
  useEffect(() => {
    if (typeof window !== "undefined") {
      // Initialize Speech Recognition
      if ("webkitSpeechRecognition" in window || "SpeechRecognition" in window) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition
        recognitionRef.current = new SpeechRecognition()
        recognitionRef.current.continuous = false
        recognitionRef.current.interimResults = false
        recognitionRef.current.lang = currentLanguage.voice

        recognitionRef.current.onresult = (event: any) => {
          const transcript = event.results[0][0].transcript
          handleUserMessage(transcript, true)
          setIsListening(false)
        }

        recognitionRef.current.onerror = (_event: Event) => {
          setIsListening(false)
        }

        recognitionRef.current.onend = (_event: Event) => {
          setIsListening(false)
        }
      }

      // Initialize Speech Synthesis
      if ("speechSynthesis" in window) {
        synthesisRef.current = window.speechSynthesis
      }
    }
  }, [selectedLanguage])

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  // Initialize with welcome message
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMessage = getWelcomeMessage()
      setMessages([
        {
          id: "welcome",
          type: "ai",
          content: welcomeMessage,
          language: selectedLanguage,
          timestamp: new Date(),
        },
      ])
      speakMessage(welcomeMessage)
    }
  }, [isOpen, selectedLanguage])

  const getWelcomeMessage = () => {
    const welcomeMessages = {
      en: `Hello! I'm your AI tutor. I'm here to help you with your studies. ${currentQuest ? `I see you're working on "${currentQuest.title}". ` : ""}Ask me anything about ${currentQuest?.subject || "your subjects"}!`,
      hi: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ AI ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§¢‡§º‡§æ‡§à ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç‡•§ ${currentQuest ? `‡§Æ‡•à‡§Ç ‡§¶‡•á‡§ñ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ü‡§™ "${currentQuest.title}" ‡§™‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ ` : ""}${currentQuest?.subject || "‡§Ü‡§™‡§ï‡•á ‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç"} ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç!`,
      bn: `‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ AI ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶°‡¶º‡¶æ‡¶∂‡ßã‡¶®‡¶æ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶õ‡¶ø‡•§ ${currentQuest ? `‡¶Ü‡¶Æ‡¶ø ‡¶¶‡ßá‡¶ñ‡¶õ‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø "${currentQuest.title}" ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá‡¶®‡•§ ` : ""}${currentQuest?.subject || "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡¶ø"} ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®!`,
      te: `‡∞π‡∞≤‡±ã! ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä AI ‡∞ü‡±ç‡∞Ø‡±Ç‡∞ü‡∞∞‡±ç‚Äå‡∞®‡∞ø. ‡∞Æ‡±Ä ‡∞ö‡∞¶‡±Å‡∞µ‡±Å‡∞≤‡∞≤‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞®‡±á‡∞®‡±Å ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å. ${currentQuest ? `‡∞Æ‡±Ä‡∞∞‡±Å "${currentQuest.title}" ‡∞™‡±à ‡∞™‡∞®‡∞ø ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡∞®‡∞ø ‡∞®‡±á‡∞®‡±Å ‡∞ö‡±Ç‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å. ` : ""}${currentQuest?.subject || "‡∞Æ‡±Ä ‡∞µ‡∞ø‡∞∑‡∞Ø‡∞æ‡∞≤‡±Å"} ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞®‡∞®‡±ç‡∞®‡±Å ‡∞è‡∞¶‡±à‡∞®‡∞æ ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø!`,
      ta: `‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç AI ‡ÆÜ‡Æö‡Æø‡Æ∞‡Æø‡ÆØ‡Æ∞‡Øç. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ ‡Æ®‡Ææ‡Æ©‡Øç ‡Æá‡Æô‡Øç‡Æï‡Øá ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ${currentQuest ? `‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç "${currentQuest.title}" ‡Æá‡Æ≤‡Øç ‡Æµ‡Øá‡Æ≤‡Øà ‡Æö‡ØÜ‡ÆØ‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ©‡Øç‡Æ±‡ØÅ ‡Æ®‡Ææ‡Æ©‡Øç ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ` : ""}${currentQuest?.subject || "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Ææ‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç"} ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æé‡Æ©‡Øç‡Æ©‡Æø‡Æü‡ÆÆ‡Øç ‡Æé‡Æ§‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç!`,
    }
    return welcomeMessages[selectedLanguage as keyof typeof welcomeMessages] || welcomeMessages.en
  }

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      setIsListening(true)
      recognitionRef.current.lang = currentLanguage.voice
      recognitionRef.current.start()
    }
  }

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop()
      setIsListening(false)
    }
  }

  const speakMessage = (text: string) => {
    if (synthesisRef.current && !isSpeaking) {
      // Cancel any ongoing speech
      synthesisRef.current.cancel()

      const utterance = new SpeechSynthesisUtterance(text)
      utterance.lang = currentLanguage.voice
      utterance.rate = 0.9
      utterance.pitch = 1

      utterance.onstart = () => setIsSpeaking(true)
      utterance.onend = () => setIsSpeaking(false)
      utterance.onerror = () => setIsSpeaking(false)

      synthesisRef.current.speak(utterance)
    }
  }

  const stopSpeaking = () => {
    if (synthesisRef.current) {
      synthesisRef.current.cancel()
      setIsSpeaking(false)
    }
  }

  const handleUserMessage = async (content: string, isVoice = false) => {
    if (!content.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: content.trim(),
      language: selectedLanguage,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputText("")
    setIsProcessing(true)

    // Simulate AI processing and response
    setTimeout(() => {
      const aiResponse = generateAIResponse(content, currentQuest)
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: "ai",
        content: aiResponse,
        language: selectedLanguage,
        timestamp: new Date(),
      }

      setMessages((prev) => [...prev, aiMessage])
      setIsProcessing(false)

      // Speak the AI response
      speakMessage(aiResponse)
    }, 1500)
  }

  const generateAIResponse = (userInput: string, quest?: any) => {
    const input = userInput.toLowerCase()

    // Context-aware responses based on current quest
    if (quest) {
      if (quest.subject === "Mathematics" && (input.includes("algebra") || input.includes("equation"))) {
        const responses = {
          en: "Great question about algebra! Remember, when solving equations, always do the same operation to both sides. For example, if you have x + 5 = 12, subtract 5 from both sides to get x = 7. Would you like me to explain a specific type of equation?",
          hi: "‡§¨‡•Ä‡§ú‡§ó‡§£‡§ø‡§§ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§µ‡§æ‡§≤! ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç, ‡§∏‡§Æ‡•Ä‡§ï‡§∞‡§£ ‡§π‡§≤ ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§π‡§Æ‡•á‡§∂‡§æ ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§§‡§∞‡§´ ‡§∏‡§Æ‡§æ‡§® ‡§ë‡§™‡§∞‡•á‡§∂‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ x + 5 = 12 ‡§π‡•à, ‡§§‡•ã ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§§‡§∞‡§´ ‡§∏‡•á 5 ‡§ò‡§ü‡§æ‡§è‡§Ç ‡§î‡§∞ x = 7 ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§",
          bn: "‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶¶‡ßÅ‡¶∞‡ßç‡¶¶‡¶æ‡¶®‡ßç‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®! ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®, ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ ‡¶â‡¶≠‡¶Ø‡¶º ‡¶™‡¶æ‡¶∂‡ßá ‡¶è‡¶ï‡¶á ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡¶∏‡ßç‡¶¨‡¶∞‡ßÇ‡¶™, ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ x + 5 = 12 ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶â‡¶≠‡¶Ø‡¶º ‡¶™‡¶æ‡¶∂ ‡¶•‡ßá‡¶ï‡ßá 5 ‡¶¨‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç x = 7 ‡¶™‡¶æ‡¶¨‡ßá‡¶®‡•§",
          te: "‡∞¨‡±Ä‡∞ú‡∞ó‡∞£‡∞ø‡∞§‡∞Ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Ö‡∞¶‡±ç‡∞≠‡±Å‡∞§‡∞Æ‡±à‡∞® ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®! ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡±Å‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø, ‡∞∏‡∞Æ‡±Ä‡∞ï‡∞∞‡∞£‡∞æ‡∞≤‡∞®‡±Å ‡∞™‡∞∞‡∞ø‡∞∑‡±ç‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡±á‡∞ü‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞é‡∞≤‡±ç‡∞≤‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞∞‡±Ü‡∞Ç‡∞°‡±Å ‡∞µ‡±à‡∞™‡±Å‡∞≤‡∞æ ‡∞Ö‡∞¶‡±á ‡∞Ü‡∞™‡∞∞‡±á‡∞∑‡∞®‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø‡•§ ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£‡∞ï‡±Å, ‡∞Æ‡±Ä‡∞ï‡±Å x + 5 = 12 ‡∞â‡∞Ç‡∞ü‡±á, ‡∞∞‡±Ü‡∞Ç‡∞°‡±Å ‡∞µ‡±à‡∞™‡±Å‡∞≤ ‡∞®‡±Å‡∞Ç‡∞°‡∞ø 5 ‡∞®‡±Å ‡∞§‡±Ä‡∞∏‡∞ø‡∞µ‡±á‡∞∏‡∞ø x = 7 ‡∞™‡±ä‡∞Ç‡∞¶‡∞Ç‡∞°‡∞ø‡•§",
          ta: "‡Æá‡ÆØ‡Æ±‡Øç‡Æï‡Æ£‡Æø‡Æ§‡ÆÆ‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø‡ÆØ ‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø! ‡Æ®‡Æø‡Æ©‡Øà‡Æµ‡Æø‡Æ≤‡Øç ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æö‡ÆÆ‡Æ©‡Øç‡Æ™‡Ææ‡Æü‡ØÅ‡Æï‡Æ≥‡Øà ‡Æ§‡ØÄ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æé‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ∞‡ØÅ ‡Æ™‡Æï‡Øç‡Æï‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ§‡Øá ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Øç‡Æ™‡Ææ‡Æü‡Øç‡Æü‡Øà‡Æö‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç. ‡Æâ‡Æ§‡Ææ‡Æ∞‡Æ£‡ÆÆ‡Ææ‡Æï, ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æü‡ÆÆ‡Øç x + 5 = 12 ‡Æá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡Ææ‡Æ≤‡Øç, ‡Æá‡Æ∞‡ØÅ ‡Æ™‡Æï‡Øç‡Æï‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Æø‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡ÆÆ‡Øç 5 ‡Æê ‡Æï‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡ØÅ x = 7 ‡Æ™‡ØÜ‡Æ±‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç‡•§",
        }
        return responses[selectedLanguage as keyof typeof responses] || responses.en
      }

      if (quest.subject === "Chemistry" && (input.includes("atom") || input.includes("element"))) {
        const responses = {
          en: "Excellent chemistry question! Atoms are the building blocks of everything around us. Each element has a unique number of protons in its nucleus. For example, hydrogen has 1 proton, carbon has 6, and oxygen has 8. What specific element would you like to learn about?",
          hi: "‡§∞‡§∏‡§æ‡§Ø‡§® ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡§æ ‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü ‡§™‡•ç‡§∞‡§∂‡•ç‡§®! ‡§™‡§∞‡§Æ‡§æ‡§£‡•Å ‡§π‡§Æ‡§æ‡§∞‡•á ‡§ö‡§æ‡§∞‡•ã‡§Ç ‡§ì‡§∞ ‡§ï‡•Ä ‡§π‡§∞ ‡§ö‡•Ä‡§ú‡§º ‡§ï‡•á ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§ñ‡§Ç‡§° ‡§π‡•à‡§Ç‡•§ ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§§‡§§‡•ç‡§µ ‡§ï‡•á ‡§®‡§æ‡§≠‡§ø‡§ï ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡•ã‡§ü‡•â‡§® ‡§ï‡•Ä ‡§è‡§ï ‡§Ö‡§®‡•Ç‡§†‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•ã‡§ú‡§® ‡§Æ‡•á‡§Ç 1 ‡§™‡•ç‡§∞‡•ã‡§ü‡•â‡§®, ‡§ï‡§æ‡§∞‡•ç‡§¨‡§® ‡§Æ‡•á‡§Ç 6, ‡§î‡§∞ ‡§ë‡§ï‡•ç‡§∏‡•Ä‡§ú‡§® ‡§Æ‡•á‡§Ç 8 ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§",
          bn: "‡¶ö‡¶Æ‡ßé‡¶ï‡¶æ‡¶∞ ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®! ‡¶™‡¶∞‡¶Æ‡¶æ‡¶£‡ßÅ‡¶≤‡ßÅ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡¶æ‡¶∞‡¶™‡¶æ‡¶∂‡ßá‡¶∞ ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶æ‡¶£ ‡¶ñ‡¶®‡ßç‡¶°‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶§‡¶§‡ßç‡¶¨‡ßá‡¶∞ ‡¶®‡¶æ‡¶≠‡¶ø‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶®‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡ßã‡¶ü‡¶®‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡¶∏‡ßç‡¶¨‡¶∞‡ßÇ‡¶™, ‡¶π‡¶æ‡¶á‡¶°‡ßç‡¶∞‡ßã‡¶ú‡ßá‡¶®‡ßá 1 ‡¶™‡ßç‡¶∞‡ßã‡¶ü‡¶®, ‡¶ï‡¶æ‡¶∞‡ßç‡¶¨‡¶®‡ßá 6 ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶ï‡ßç‡¶∏‡¶ø‡¶ú‡ßá‡¶®‡ßá 8 ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
          te: "‡∞∞‡∞∏‡∞æ‡∞Ø‡∞® ‡∞∂‡∞æ‡∞∏‡±ç‡∞§‡±ç‡∞∞‡∞Ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Ö‡∞¶‡±ç‡∞≠‡±Å‡∞§‡∞Æ‡±à‡∞® ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®! ‡∞™‡∞∞‡∞Æ‡∞æ‡∞£‡±Å‡∞≤‡±Å ‡∞Æ‡∞®‡∞Ç ‡∞ö‡±Ç‡∞¶‡±ç‡∞¶‡∞æ‡∞Ç ‡∞ï‡∞æ‡∞¨‡∞ü‡±ç‡∞ü‡∞ø ‡∞™‡±ç‡∞∞‡∞§‡∞ø ‡∞§‡∞§‡±ç‡∞µ‡∞Ç ‡∞®‡∞æ‡∞ï‡±ç‡∞ï‡±Å ‡∞è‡∞ï ‡∞Ö‡∞®‡±Å‡∞≠‡±Ç‡∞§‡∞ø ‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø ‡∞â‡∞Ç‡∞¶‡∞ø‡•§ ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£‡∞ï‡±Å, ‡∞π‡±à‡∞°‡±ç‡∞∞‡±ã‡∞ú‡±Ü‡∞®‡±ç‚Äå‡∞≤‡±ã 1 ‡∞™‡±ç‡∞∞‡±ã‡∞ü‡∞®‡±ç, ‡∞ï‡∞æ‡∞∞‡±ç‡∞¨‡∞®‡±ç‚Äå‡∞≤‡±ã 6 ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ö‡∞ï‡±ç‡∞∏‡∞ø‡∞ú‡±Ü‡∞®‡±ç‚Äå‡∞≤‡±ã 8 ‡∞â‡∞Ç‡∞¶‡∞ø‡•§",
          ta: "‡Æ∞‡Æ∏‡Ææ‡ÆØ‡Æø‡Æ©‡Øç ‡Æµ‡Æø‡Æû‡Øç‡Æû‡Ææ‡Æ©‡ÆÆ‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø‡ÆØ ‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø! ‡Æ™‡Æ∞‡ÆÆ‡Ææ‡Æ£‡ØÅ‡Æï‡Æ≥‡Øç ‡Æé‡Æ≤‡Øç‡Æ≤‡Ææ‡Æµ‡Æ±‡Øç‡Æ±‡Æø‡Æ©‡Øç ‡Æ®‡Æø‡Æ∞‡Øç‡ÆÆ‡Ææ‡Æ£‡ÆÆ‡Øç, ‡ÆÖ‡Æµ‡Øà ‡Æí‡Æµ‡Øç‡Æµ‡Øä‡Æ∞‡ØÅ ‡Æ§‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ§‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡Æ®‡Æü‡ØÅ‡Æµ‡Æø‡Æ≤‡Øç ‡Æí‡Æ∞‡ØÅ ‡Æµ‡ØÜ‡Æ±‡Øç‡Æ±‡Æø ‡Æµ‡Øá‡Æ±‡Øç‡Æ±‡Æø‡ÆØ‡Ææ‡Æ© ‡Æ™‡Øç‡Æ∞‡Øã‡Æü‡Æ©‡Øç‡Æï‡Æ≥‡Æø‡Æ©‡Øç ‡Æé‡Æ£‡Øç‡Æ£‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ. ‡Æâ‡Æ§‡Ææ‡Æ∞‡Æ£‡ÆÆ‡Ææ‡Æï, ‡Æπ‡Øà‡Æü‡Øç‡Æ∞‡Øã‡Æú‡Æ©‡Øç‚Äå‡Æ≤‡Øã 1 ‡Æ™‡Øç‡Æ∞‡Øã‡Æü‡Æ©‡Øç, ‡Æï‡Ææ‡Æ∞‡Øç‡Æ™‡Æ©‡Øç‚Äå‡Æ≤‡Øã 6 ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æï‡Øç‡Æ∏‡Æø‡Æú‡Æ©‡Øç‚Äå‡Æ≤‡Øã 8 ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ.",
        }
        return responses[selectedLanguage as keyof typeof responses] || responses.en
      }
    }

    // Default response if no context is available
    const defaultResponses = {
      en: "I'm sorry, I couldn't understand your question. Could you please rephrase it?",
      hi: "‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏‡•á ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§¨‡§§‡§æ‡§è‡§Ç‡•§",
      bn: "‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶¨‡ßã‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø ‡¶®‡¶ø‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶≤‡ßÅ‡¶®‡•§",
      te: "‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞ö‡±Ç‡∞¶‡±ç‡∞¶‡∞æ‡∞Ç. ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞á‡∞¶‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞ö‡±Ç‡∞¶‡±ç‡∞¶‡∞æ‡∞Ç?",
      ta: "‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡ÆØ‡Øà ‡ÆÖ‡Æ±‡Æø‡Æµ‡Æø‡ÆØ‡Æ≤‡Ææ‡Æï ‡Æï‡Ææ‡Æü‡Øç‡Æü‡Æø‡ÆØ ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡Æø‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡ÆØ‡Øà ‡ÆÆ‡ØÅ‡Æ±‡Øà‡Æµ‡Æ∞‡Øà ‡Æö‡Øä‡Æ≤‡Øç‡Æ≤‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Ææ?",
    }
    return defaultResponses[selectedLanguage as keyof typeof defaultResponses] || defaultResponses.en
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" className="w-full sm:w-auto bg-transparent">
          <Bot className="mr-2 h-4 w-4" />
          <span className="hidden sm:inline">AI Tutor</span>
          <span className="sm:hidden">AI</span>
        </Button>
      </DialogTrigger>
      <DialogContent className="w-[95vw] max-w-[425px] h-[90vh] max-h-[600px] flex flex-col">
        <DialogHeader className="flex-shrink-0">
          <DialogTitle>AI Tutor</DialogTitle>
          <DialogDescription className="text-sm">
            {currentQuest ? `Working on: "${currentQuest.title}"` : "Ask me anything!"}
          </DialogDescription>
        </DialogHeader>

        <ScrollArea className="flex-1 w-full min-h-0 px-1">
          {messages.map((message) => (
            <div key={message.id} className="flex gap-2 sm:gap-4 py-2 sm:py-4">
              {message.type === "user" ? (
                <Avatar className="h-8 w-8 sm:h-10 sm:w-10 flex-shrink-0">
                  <AvatarImage src="/avatars/01.png" alt="@shadcn" />
                  <AvatarFallback>U</AvatarFallback>
                </Avatar>
              ) : (
                <Avatar className="h-8 w-8 sm:h-10 sm:w-10 flex-shrink-0">
                  <AvatarImage src="/ai-tutor-avatar.png" alt="@ai" />
                  <AvatarFallback>AI</AvatarFallback>
                </Avatar>
              )}
              <div className="flex flex-col gap-1 sm:gap-2 min-w-0 flex-1">
                <div className="flex items-center gap-2">
                  <Badge variant="outline" className="text-xs">
                    {message.type === "user" ? "You" : "AI"}
                  </Badge>
                  <span className="text-xs text-muted-foreground hidden sm:inline">
                    {message.timestamp.toLocaleTimeString()}
                  </span>
                </div>
                <p className="text-sm break-words">{message.content}</p>
              </div>
            </div>
          ))}
          {isProcessing && (
            <div className="flex gap-2 sm:gap-4 py-2 sm:py-4">
              <Avatar className="h-8 w-8 sm:h-10 sm:w-10 flex-shrink-0">
                <AvatarImage src="/ai-tutor-avatar.png" alt="@ai" />
                <AvatarFallback>AI</AvatarFallback>
              </Avatar>
              <div className="flex flex-col gap-1 sm:gap-2">
                <Badge variant="outline" className="text-xs">
                  AI
                </Badge>
                <p className="text-sm text-muted-foreground">Thinking...</p>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </ScrollArea>

        <div className="flex-shrink-0 space-y-3 pt-3 border-t">
          {/* Language selector row */}
          <div className="flex gap-2">
            <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
              <SelectTrigger className="flex-1 min-w-0">
                <SelectValue placeholder="Language" />
              </SelectTrigger>
              <SelectContent>
                {languages.map((lang) => (
                  <SelectItem key={lang.code} value={lang.code}>
                    <span className="hidden sm:inline">
                      {lang.flag} {lang.name}
                    </span>
                    <span className="sm:hidden">{lang.flag}</span>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Voice controls row */}
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
            <Button
              onClick={isListening ? stopListening : startListening}
              disabled={isProcessing}
              variant={isListening ? "destructive" : "default"}
              size="sm"
              className="text-xs"
            >
              {isListening ? (
                <>
                  <MicOff className="mr-1 h-3 w-3" />
                  <span className="hidden sm:inline">Stop</span>
                </>
              ) : (
                <>
                  <Mic className="mr-1 h-3 w-3" />
                  <span className="hidden sm:inline">Listen</span>
                </>
              )}
            </Button>

            <Button
              onClick={stopSpeaking}
              disabled={!isSpeaking}
              variant="outline"
              size="sm"
              className="text-xs bg-transparent"
            >
              <VolumeX className="mr-1 h-3 w-3" />
              <span className="hidden sm:inline">Stop Speech</span>
            </Button>

            <Button
              onClick={() => handleUserMessage(inputText)}
              disabled={isProcessing || !inputText.trim()}
              size="sm"
              className="text-xs col-span-2 sm:col-span-1"
            >
              <Send className="mr-1 h-3 w-3" />
              Send
            </Button>
          </div>

          {/* Input row */}
          <div className="flex gap-2">
            <input
              type="text"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={(e) => {
                if (e.key === "Enter" && !isProcessing && inputText.trim()) {
                  handleUserMessage(inputText)
                }
              }}
              placeholder="Type your message..."
              className="flex-1 rounded-lg border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              disabled={isProcessing}
            />
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}
