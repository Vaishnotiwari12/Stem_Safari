"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Phone,
  MessageSquare,
  Calendar,
  Award,
  Bell,
  Volume2,
  User,
  BookOpen,
  Trophy,
  Star,
  Clock,
  Heart,
  Send,
  Mic,
} from "lucide-react"

interface ChildProgress {
  name: string
  grade: string
  totalXP: number
  level: number
  weeklyProgress: number
  completedQuests: number
  currentStreak: number
  lastActive: string
  subjects: {
    name: string
    progress: number
    grade: string
  }[]
  recentAchievements: {
    title: string
    date: string
    reward: string
  }[]
}

interface Message {
  id: string
  type: "sms" | "voice" | "notification"
  title: string
  content: string
  timestamp: string
  isRead: boolean
  priority: "low" | "medium" | "high"
  sender: string
}

interface Meeting {
  id: string
  title: string
  teacher: string
  date: string
  time: string
  type: "parent-teacher" | "progress-review" | "concern"
  status: "scheduled" | "completed" | "cancelled"
}

export default function ParentHub() {
  const [selectedLanguage, setSelectedLanguage] = useState("hi")
  const [isListening, setIsListening] = useState(false)
  const [selectedChild, setSelectedChild] = useState("raj")

  const languages = [
    { code: "hi", name: "‡§π‡§ø‡§Ç‡§¶‡•Ä", flag: "üáÆüá≥" },
    { code: "en", name: "English", flag: "üá∫üá∏" },
    { code: "bn", name: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", flag: "üáßüá©" },
    { code: "te", name: "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å", flag: "üáÆüá≥" },
    { code: "ta", name: "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç", flag: "üáÆüá≥" },
  ]

  const childProgress: ChildProgress = {
    name: "‡§∞‡§æ‡§ú ‡§ï‡•Å‡§Æ‡§æ‡§∞",
    grade: "‡§ï‡§ï‡•ç‡§∑‡§æ 9",
    totalXP: 1250,
    level: 8,
    weeklyProgress: 85,
    completedQuests: 12,
    currentStreak: 5,
    lastActive: "2 ‡§ò‡§Ç‡§ü‡•á ‡§™‡§π‡§≤‡•á",
    subjects: [
      { name: "‡§ó‡§£‡§ø‡§§", progress: 78, grade: "‡§Ö‡§ö‡•ç‡§õ‡§æ" },
      { name: "‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®", progress: 85, grade: "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ" },
      { name: "‡§∞‡§∏‡§æ‡§Ø‡§®", progress: 72, grade: "‡§Ö‡§ö‡•ç‡§õ‡§æ" },
      { name: "‡§≠‡•å‡§§‡§ø‡§ï‡•Ä", progress: 68, grade: "‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§" },
    ],
    recentAchievements: [
      { title: "‡§ó‡§£‡§ø‡§§ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞", date: "3 ‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á", reward: "‡§µ‡•à‡§ú‡•ç‡§û‡§æ‡§®‡§ø‡§ï ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞" },
      { title: "‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§ö‡•à‡§Ç‡§™‡§ø‡§Ø‡§®", date: "1 ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§™‡§π‡§≤‡•á", reward: "‡§™‡•ç‡§∞‡§Æ‡§æ‡§£ ‡§™‡§§‡•ç‡§∞" },
    ],
  }

  const messages: Message[] = [
    {
      id: "1",
      type: "notification",
      title: "‡§¨‡§ß‡§æ‡§à ‡§π‡•ã! ‡§∞‡§æ‡§ú ‡§®‡•á ‡§®‡§Ø‡§æ ‡§¨‡•à‡§ú ‡§ú‡•Ä‡§§‡§æ",
      content: "‡§Ü‡§™‡§ï‡•á ‡§¨‡•á‡§ü‡•á ‡§∞‡§æ‡§ú ‡§®‡•á '‡§ó‡§£‡§ø‡§§ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞' ‡§¨‡•à‡§ú ‡§ú‡•Ä‡§§‡§æ ‡§π‡•à‡•§ ‡§â‡§®‡•ç‡§π‡•ã‡§Ç‡§®‡•á 50 ‡§ó‡§£‡§ø‡§§ ‡§ï‡•á ‡§∏‡§µ‡§æ‡§≤ ‡§∏‡§π‡•Ä ‡§π‡§≤ ‡§ï‡§ø‡§è ‡§π‡•à‡§Ç‡•§",
      timestamp: "2 ‡§ò‡§Ç‡§ü‡•á ‡§™‡§π‡§≤‡•á",
      isRead: false,
      priority: "high",
      sender: "Quest Academy",
    },
    {
      id: "2",
      type: "sms",
      title: "‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü",
      content: "‡§∞‡§æ‡§ú ‡§®‡•á ‡§á‡§∏ ‡§∏‡§™‡•ç‡§§‡§æ‡§π 85% ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ï‡•Ä ‡§π‡•à‡•§ ‡§µ‡•á ‡§ó‡§£‡§ø‡§§ ‡§î‡§∞ ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§",
      timestamp: "1 ‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á",
      isRead: true,
      priority: "medium",
      sender: "‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ",
    },
    {
      id: "3",
      type: "voice",
      title: "‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§∏‡•á ‡§∏‡§Ç‡§¶‡•á‡§∂",
      content: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á, ‡§Æ‡•à‡§Ç ‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§∞‡§æ‡§ú ‡§ï‡•Ä ‡§™‡§¢‡§º‡§æ‡§à ‡§Æ‡•á‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§®‡§∏‡•á ‡§≠‡•å‡§§‡§ø‡§ï‡•Ä ‡§™‡§∞ ‡§î‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§®‡•á ‡§ï‡•ã ‡§ï‡§π‡•á‡§Ç‡•§",
      timestamp: "2 ‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á",
      isRead: true,
      priority: "medium",
      sender: "‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ",
    },
  ]

  const upcomingMeetings: Meeting[] = [
    {
      id: "1",
      title: "‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ",
      teacher: "‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ",
      date: "15 ‡§´‡§∞‡§µ‡§∞‡•Ä 2024",
      time: "‡§∂‡§æ‡§Æ 4:00 ‡§¨‡§ú‡•á",
      type: "progress-review",
      status: "scheduled",
    },
    {
      id: "2",
      title: "‡§≠‡•å‡§§‡§ø‡§ï‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§ö‡§∞‡•ç‡§ö‡§æ",
      teacher: "‡§∞‡§æ‡§Æ ‡§™‡•ç‡§∞‡§∏‡§æ‡§¶",
      date: "20 ‡§´‡§∞‡§µ‡§∞‡•Ä 2024",
      time: "‡§∂‡§æ‡§Æ 5:00 ‡§¨‡§ú‡•á",
      type: "concern",
      status: "scheduled",
    },
  ]

  const speakText = (text: string) => {
    if ("speechSynthesis" in window) {
      const utterance = new SpeechSynthesisUtterance(text)
      utterance.lang = "hi-IN"
      utterance.rate = 0.8
      window.speechSynthesis.speak(utterance)
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "bg-red-100 text-red-800 border-red-200"
      case "medium":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "low":
        return "bg-green-100 text-green-800 border-green-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getSubjectGradeColor = (grade: string) => {
    switch (grade) {
      case "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ":
        return "text-green-600"
      case "‡§Ö‡§ö‡•ç‡§õ‡§æ":
        return "text-blue-600"
      case "‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§":
        return "text-orange-600"
      default:
        return "text-gray-600"
    }
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="bg-card border-b border-border">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="bg-primary rounded-full p-2">
                <Heart className="h-6 w-6 text-primary-foreground" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-foreground">‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞</h1>
                <p className="text-sm text-muted-foreground">‡§Ö‡§™‡§®‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§¶‡•á‡§ñ‡•á‡§Ç</p>
              </div>
            </div>

            <div className="flex items-center gap-4">
              {/* Language Selector */}
              <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
                <SelectTrigger className="w-32">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {languages.map((lang) => (
                    <SelectItem key={lang.code} value={lang.code}>
                      {lang.flag} {lang.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              {/* Voice Help */}
              <Button
                variant="outline"
                size="sm"
                onClick={() => speakText("‡§®‡§Æ‡§∏‡•ç‡§§‡•á, ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ï‡§æ ‡§™‡•á‡§ú ‡§π‡•à‡•§ ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™ ‡§â‡§®‡§ï‡•Ä ‡§™‡§¢‡§º‡§æ‡§à ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§")}
              >
                <Volume2 className="h-4 w-4 mr-2" />
                ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§∏‡•Å‡§®‡•á‡§Ç
              </Button>

              {/* Notifications */}
              <Button variant="outline" size="sm" className="relative bg-transparent">
                <Bell className="h-4 w-4 mr-2" />
                ‡§∏‡•Ç‡§ö‡§®‡§æ‡§è‡§Ç
                <Badge className="absolute -top-2 -right-2 h-5 w-5 rounded-full bg-red-500 text-white text-xs flex items-center justify-center">
                  3
                </Badge>
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-6">
        {/* Child Overview Card */}
        <Card className="mb-6 bg-gradient-to-r from-blue-50 to-green-50 border-blue-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <Avatar className="h-16 w-16 border-2 border-primary">
                  <AvatarImage src="/student-avatar.png" />
                  <AvatarFallback className="bg-primary text-primary-foreground text-lg font-bold">‡§∞‡§æ</AvatarFallback>
                </Avatar>
                <div>
                  <h2 className="text-2xl font-bold text-foreground">{childProgress.name}</h2>
                  <p className="text-muted-foreground">{childProgress.grade} ‚Ä¢ ‡§ó‡§æ‡§Ç‡§µ ‡§∏‡•ç‡§ï‡•Ç‡§≤</p>
                  <div className="flex items-center gap-4 mt-2">
                    <div className="flex items-center gap-1">
                      <Star className="h-4 w-4 text-yellow-500" />
                      <span className="text-sm font-medium">‡§∏‡•ç‡§§‡§∞ {childProgress.level}</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <Trophy className="h-4 w-4 text-orange-500" />
                      <span className="text-sm font-medium">{childProgress.completedQuests} ‡§™‡•Ç‡§∞‡•ç‡§£</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <Clock className="h-4 w-4 text-green-500" />
                      <span className="text-sm font-medium">{childProgress.lastActive}</span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="text-right">
                <div className="text-3xl font-bold text-primary">{childProgress.weeklyProgress}%</div>
                <p className="text-sm text-muted-foreground">‡§á‡§∏ ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø</p>
                <Button
                  className="mt-2"
                  onClick={() =>
                    speakText(
                      `‡§Ü‡§™‡§ï‡•á ‡§¨‡•á‡§ü‡•á ${childProgress.name} ‡§®‡•á ‡§á‡§∏ ‡§∏‡§™‡•ç‡§§‡§æ‡§π ${childProgress.weeklyProgress} ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ï‡•Ä ‡§π‡•à‡•§`,
                    )
                  }
                >
                  <Volume2 className="h-4 w-4 mr-2" />
                  ‡§∏‡•Å‡§®‡•á‡§Ç
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        <Tabs defaultValue="progress" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="progress">‡§™‡•ç‡§∞‡§ó‡§§‡§ø</TabsTrigger>
            <TabsTrigger value="messages">‡§∏‡§Ç‡§¶‡•á‡§∂</TabsTrigger>
            <TabsTrigger value="meetings">‡§Æ‡•Ä‡§ü‡§ø‡§Ç‡§ó</TabsTrigger>
            <TabsTrigger value="communication">‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï</TabsTrigger>
          </TabsList>

          <TabsContent value="progress" className="space-y-6">
            {/* Subject Progress */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BookOpen className="h-5 w-5" />
                  ‡§µ‡§ø‡§∑‡§Ø‡§µ‡§æ‡§∞ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø
                </CardTitle>
                <CardDescription>‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§π‡§∞ ‡§µ‡§ø‡§∑‡§Ø ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§¶‡•á‡§ñ‡•á‡§Ç</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {childProgress.subjects.map((subject, index) => (
                    <div key={index} className="p-4 border rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium">{subject.name}</h4>
                        <span className={`text-sm font-medium ${getSubjectGradeColor(subject.grade)}`}>
                          {subject.grade}
                        </span>
                      </div>
                      <Progress value={subject.progress} className="mb-2" />
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-muted-foreground">{subject.progress}% ‡§™‡•Ç‡§∞‡•ç‡§£</span>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() =>
                            speakText(`${subject.name} ‡§Æ‡•á‡§Ç ${subject.progress} ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§π‡•à‡•§ ‡§Ø‡§π ${subject.grade} ‡§π‡•à‡•§`)
                          }
                        >
                          <Volume2 className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Recent Achievements */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Award className="h-5 w-5" />
                  ‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø‡§Ø‡§æ‡§Ç
                </CardTitle>
                <CardDescription>‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•á ‡§®‡§è ‡§¨‡•à‡§ú ‡§î‡§∞ ‡§™‡•Å‡§∞‡§∏‡•ç‡§ï‡§æ‡§∞</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {childProgress.recentAchievements.map((achievement, index) => (
                    <div key={index} className="flex items-center justify-between p-4 bg-muted rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="bg-yellow-100 p-2 rounded-full">
                          <Trophy className="h-5 w-5 text-yellow-600" />
                        </div>
                        <div>
                          <h4 className="font-medium">{achievement.title}</h4>
                          <p className="text-sm text-muted-foreground">{achievement.date}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="text-sm font-medium text-green-600">{achievement.reward}</p>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => speakText(`${achievement.title} ‡§¨‡•à‡§ú ‡§ú‡•Ä‡§§‡§æ‡•§ ‡§á‡§®‡§æ‡§Æ: ${achievement.reward}`)}
                        >
                          <Volume2 className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="messages" className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§î‡§∞ ‡§Ö‡§™‡§°‡•á‡§ü</h2>
              <Button>
                <Send className="h-4 w-4 mr-2" />
                ‡§®‡§Ø‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç
              </Button>
            </div>

            <div className="space-y-4">
              {messages.map((message) => (
                <Card key={message.id} className={`${!message.isRead ? "border-primary" : ""}`}>
                  <CardContent className="p-4">
                    <div className="flex items-start justify-between">
                      <div className="flex items-start gap-3 flex-1">
                        <div className="bg-primary/10 p-2 rounded-full">
                          {message.type === "sms" && <MessageSquare className="h-4 w-4 text-primary" />}
                          {message.type === "voice" && <Volume2 className="h-4 w-4 text-primary" />}
                          {message.type === "notification" && <Bell className="h-4 w-4 text-primary" />}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <h4 className="font-medium">{message.title}</h4>
                            <Badge className={getPriorityColor(message.priority)} variant="outline">
                              {message.priority === "high" ? "‡§ú‡§∞‡•Ç‡§∞‡•Ä" : message.priority === "medium" ? "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø" : "‡§ï‡§Æ"}
                            </Badge>
                          </div>
                          <p className="text-sm text-muted-foreground mb-2">{message.content}</p>
                          <div className="flex items-center justify-between">
                            <span className="text-xs text-muted-foreground">
                              {message.sender} ‚Ä¢ {message.timestamp}
                            </span>
                            <Button variant="ghost" size="sm" onClick={() => speakText(message.content)}>
                              <Volume2 className="h-3 w-3 mr-1" />
                              ‡§∏‡•Å‡§®‡•á‡§Ç
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="meetings" className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold">‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§Æ‡•Ä‡§ü‡§ø‡§Ç‡§ó</h2>
              <Button>
                <Calendar className="h-4 w-4 mr-2" />
                ‡§®‡§à ‡§Æ‡•Ä‡§ü‡§ø‡§Ç‡§ó ‡§¨‡•Å‡§ï ‡§ï‡§∞‡•á‡§Ç
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {upcomingMeetings.map((meeting) => (
                <Card key={meeting.id}>
                  <CardContent className="p-4">
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <h4 className="font-medium">{meeting.title}</h4>
                        <Badge variant={meeting.type === "concern" ? "destructive" : "secondary"}>
                          {meeting.type === "progress-review" ? "‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ" : "‡§ö‡§ø‡§Ç‡§§‡§æ"}
                        </Badge>
                      </div>

                      <div className="space-y-2 text-sm">
                        <div className="flex items-center gap-2">
                          <User className="h-4 w-4 text-muted-foreground" />
                          <span>‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï: {meeting.teacher}</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Calendar className="h-4 w-4 text-muted-foreground" />
                          <span>{meeting.date}</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Clock className="h-4 w-4 text-muted-foreground" />
                          <span>{meeting.time}</span>
                        </div>
                      </div>

                      <div className="flex gap-2">
                        <Button size="sm" className="flex-1">
                          <Phone className="h-3 w-3 mr-1" />
                          ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç
                        </Button>
                        <Button variant="outline" size="sm" className="flex-1 bg-transparent">
                          <Calendar className="h-3 w-3 mr-1" />
                          ‡§∞‡§ø‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="communication" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Quick Actions */}
              <Card>
                <CardHeader>
                  <CardTitle>‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï</CardTitle>
                  <CardDescription>‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï‡•ã‡§Ç ‡§î‡§∞ ‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§∏‡•á ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Button className="w-full justify-start text-left h-auto py-4">
                    <Phone className="h-5 w-5 mr-3" />
                    <div>
                      <div className="font-medium">‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç</div>
                      <div className="text-sm text-muted-foreground">‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ - +91 98765 43210</div>
                    </div>
                  </Button>

                  <Button variant="outline" className="w-full justify-start text-left h-auto py-4 bg-transparent">
                    <MessageSquare className="h-5 w-5 mr-3" />
                    <div>
                      <div className="font-medium">SMS ‡§≠‡•á‡§ú‡•á‡§Ç</div>
                      <div className="text-sm text-muted-foreground">‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç</div>
                    </div>
                  </Button>

                  <Button variant="outline" className="w-full justify-start text-left h-auto py-4 bg-transparent">
                    <Volume2 className="h-5 w-5 mr-3" />
                    <div>
                      <div className="font-medium">‡§µ‡•â‡§Ø‡§∏ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç</div>
                      <div className="text-sm text-muted-foreground">‡§Ü‡§µ‡§æ‡§ú‡§º ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç</div>
                    </div>
                  </Button>
                </CardContent>
              </Card>

              {/* Emergency Contacts */}
              <Card>
                <CardHeader>
                  <CardTitle>‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï</CardTitle>
                  <CardDescription>‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="p-3 border rounded-lg">
                    <div className="font-medium">‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø</div>
                    <div className="text-sm text-muted-foreground">+91 98765 43200</div>
                    <div className="text-sm text-muted-foreground">‡§∏‡•Å‡§¨‡§π 9:00 - ‡§∂‡§æ‡§Æ 5:00</div>
                  </div>

                  <div className="p-3 border rounded-lg">
                    <div className="font-medium">‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§æ‡§ö‡§æ‡§∞‡•ç‡§Ø</div>
                    <div className="text-sm text-muted-foreground">‡§∞‡§æ‡§Æ ‡§™‡•ç‡§∞‡§∏‡§æ‡§¶ ‡§ú‡•Ä</div>
                    <div className="text-sm text-muted-foreground">+91 98765 43201</div>
                  </div>

                  <div className="p-3 border rounded-lg">
                    <div className="font-medium">‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï</div>
                    <div className="text-sm text-muted-foreground">‡§°‡•â. ‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§¶‡•á‡§µ‡•Ä</div>
                    <div className="text-sm text-muted-foreground">+91 98765 43202</div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Voice Message Recorder */}
            <Card>
              <CardHeader>
                <CardTitle>‡§µ‡•â‡§Ø‡§∏ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç</CardTitle>
                <CardDescription>‡§Ö‡§™‡§®‡•Ä ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§Æ‡•á‡§Ç ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡•ã ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex items-center gap-4">
                  <Button
                    size="lg"
                    variant={isListening ? "destructive" : "default"}
                    onClick={() => setIsListening(!isListening)}
                  >
                    <Mic className="h-5 w-5 mr-2" />
                    {isListening ? "‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç" : "‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç"}
                  </Button>

                  {isListening && (
                    <div className="flex items-center gap-2 text-red-600">
                      <div className="w-3 h-3 bg-red-600 rounded-full animate-pulse"></div>
                      <span className="text-sm">‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...</span>
                    </div>
                  )}
                </div>

                <p className="text-sm text-muted-foreground mt-4">
                  ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§ï‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Ø‡§π ‡§∏‡•Ä‡§ß‡•á ‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•á ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡•ã ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§
                </p>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
